% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fixed_effects_removal.R
\name{fixed_effect_int_drops}
\alias{fixed_effect_int_drops}
\title{Iteratively drop non-significant interaction fixed effects and refit}
\usage{
fixed_effect_int_drops(
  model,
  fixed_effects,
  remove_ints,
  new_random_effect,
  alpha,
  model_env = NULL,
  data = NULL
)
}
\arguments{
\item{model}{A fitted mixed-effects model (typically \code{lmerMod}) providing
the starting point and random-effects structure.}

\item{fixed_effects}{Character vector of fixed-effect terms to use in refits.}

\item{remove_ints}{Character scalar: the variable name whose interaction terms
should be considered for removal (passed to the internal extractor), or
\code{"all_interactions"} to consider all interactions.}

\item{new_random_effect}{Character scalar; a random-slope variable to add to the
refit during the iterative stage (added consistently with the model's current
random-effects structure).}

\item{alpha}{Numeric threshold; interactions with p-values \emph{greater than}
this are considered non-significant and eligible to drop.}

\item{model_env}{Optional environment to bind generated formulas; if \code{NULL},
a new environment is created with \code{globalenv()} as parent (a warning is issued).}

\item{data}{Optional data frame used when refitting models and checking variables.}
}
\value{
A list representing the step-by-step history (class \code{"fe_int_drop_history"}),
including an explicit \code{type = "final_model"} entry containing the final fitted model.
}
\description{
Starting from a fitted mixed model and a fixed-effects term vector, this function:
(1) identifies non-significant interaction terms (by p-value > \code{alpha}),
(2) iteratively removes them while refitting the model (REML), (3) optionally
drops a target main effect if no significant interactions remain and the main
effect itself is non-significant, and (4) returns a step-by-step history with a
final model refit that preserves the original random-effects structure.
}
\details{
Internally, the function:
\itemize{
\item Uses \code{.grab_dv()} and \code{.grab_random_int_group()} to recover the DV and grouping factor.
\item Calls \code{add_random_term()} to produce a random-effects term that includes
\code{new_random_effect} in a way that matches the current correlation/intercept status.
\item Uses \code{drop_nonsig_int_effects()} to choose interaction terms to remove, then
\code{.protect2way()} to avoid dropping two-way interactions that are part of any
three-way interaction.
\item Rebuilds a formula each iteration (\code{reformulate}) and refits with \code{lmerTest::lmer(..., REML = TRUE)}.
\item After the loop, may drop \code{remove_ints} main effect if it and all of its interactions are non-significant.
\item Builds a final model via \code{build_formula()} using the \emph{original}
random-effects terms and their original correlation/intercept behavior
(detected with \code{check_random_effects()} and \code{get_random_effects()}).
}
A history entry is logged at each step via \code{log_fe_int_drop()}, and the returned
object is tagged with class \code{"fe_int_drop_history"} using \code{feid_set_class()}.
}
\examples{
\dontrun{
# Suppose `fit` is an lmerMod and `df` is the underlying data
H <- fixed_effect_int_drops(
  model            = fit,
  fixed_effects    = c("x1","x2","x1*x2"),
  remove_ints      = "x1",
  new_random_effect= "x1",
  alpha            = 0.10,
  data             = df
)
class(H)           # "fe_int_drop_history"
}

}
\seealso{
\code{\link{log_fe_int_drop}}, \code{\link{feid_set_class}},
\code{\link{drop_nonsig_int_effects}}, \code{\link{build_fixed_term}},
\code{\link{build_formula}}, \code{\link{check_random_effects}},
\code{\link{get_random_effects}}, \code{\link{add_random_term}}
}
