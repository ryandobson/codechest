% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/renaming.R
\name{rename_rows}
\alias{rename_rows}
\title{Rename Rows in Selected Data Frame Columns}
\usage{
rename_rows(df, rename_vector, columns_to_rename = NULL)
}
\arguments{
\item{df}{A data frame. Typically an output table where row values need to be
renamed (e.g., descriptives or model output).}

\item{rename_vector}{A named character vector of the form
\code{c("New Name" = "Old Name", ...)}. The old values are matched and
replaced with the new names.}

\item{columns_to_rename}{Optional character vector of column names to search
for values to rename. If \code{NULL} (default), all columns in \code{df} are
considered.}
}
\value{
A data frame with specified row values replaced according to
\code{rename_vector}.
}
\description{
This function replaces values in specified columns of a data frame using a
named vector of new names. It is useful for making output tables more
readable (e.g., converting variable codes to human-readable labels) without
renaming variables in the raw dataset.
}
\details{
\itemize{
\item The function loops through each row and column, checking if a value matches
an entry in \code{rename_vector}. If so, the value is replaced by the
corresponding new name.
\item For large data frames, this approach may be slow because it uses nested
for-loops. If speed becomes an issue, consider vectorized or
\pkg{data.table}-based alternatives.
\item To avoid unintended changes, you can specify \code{columns_to_rename} so
only selected columns are edited.
}
}
\examples{
df <- data.frame(var1 = c("x1", "x2", "x3"),
                 var2 = c("y1", "y2", "y3"))
renames <- c("Item A" = "x1", "Item B" = "y2")

rename_rows(df, renames)

# Restrict renaming to var1 only
rename_rows(df, renames, columns_to_rename = "var1")

}
\seealso{
\code{\link[dplyr]{recode}}, \code{\link[data.table]{set}}
}
